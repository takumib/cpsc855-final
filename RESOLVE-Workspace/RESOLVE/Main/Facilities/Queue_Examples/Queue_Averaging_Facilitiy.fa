Facility Queue_Averaging_Facilitiy;
    Facility Integer_Queue_Fac is Queue_Template(Integer, 9)
		realized by Circular_Array_Realiz;

    Definition Holds_For_Each(S : Str(Z), f : (Z -> B)) : B;

    Operation Queue_Average(restores Q : Integer_Queue_Fac.Queue) : Integer;
		requires |Q| <= (max_int / 2) and Q /= Empty_String and
			Holds_For_Each(Q, Non_Negative);
		ensures Queue_Average = Fold_String_Right(Sum, 0, Q) / |Q|;
	Procedure
		Var Cur_Entry : Integer;
		Var Included : Integer_Queue_Fac.Queue;
		Var Running_Average : Integer;
		Var Running_Remainder : Integer;
		Var Remainder_Adjust : Integer;
		Var Weighted_Cur_Entry : Integer;
		Var Cur_Entry_Remainder : Integer;
		Var Q_Length : Integer;

		Q_Length := Length(Q);

		While (Length(Q) > 0)
			changing Cur_Entry, Included, Q, Running_Average, Running_Remainder,
				Weighted_Cur_Entry, Cur_Entry_Remainder, Remainder_Adjust;
			maintaining Included o Q = #Q and
				Running_Average = 
					Fold_String_Right(Sum, 0, Included) /
						|#Q| and
				Running_Remainder =
					Fold_String_Right(Sum, 0, Included) mod
						|#Q| and
				0 <= Running_Average  and
				Running_Average <= max_int / |#Q| * |Included|;
			decreasing |Q|;
		do
			Dequeue(Cur_Entry, Q);

			Weighted_Cur_Entry := Div(Cur_Entry, Q_Length);
			Cur_Entry_Remainder := Mod(Cur_Entry, Q_Length);

			Running_Average := Running_Average + Weighted_Cur_Entry;

			Running_Remainder := Running_Remainder + Cur_Entry_Remainder;
			Remainder_Adjust := Div(Running_Remainder, Q_Length);
			Running_Remainder := Mod(Running_Remainder, Q_Length);

			Enqueue(Cur_Entry, Included);
		end;

		Q :=: Included;

		Queue_Average := Running_Average;
	end;
end Queue_Averaging_Facilitiy;
