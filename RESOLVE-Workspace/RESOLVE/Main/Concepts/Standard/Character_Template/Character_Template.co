(*
 * This softare is released under the new BSD 2006 license.
 * 
 * Note the new BSD license is equivalent to the MIT License, except for the
 * no-endorsement final clause.
 * 
 * Copyright (c) 2007, Clemson University
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer. 
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution. 
 *   * Neither the name of the Clemson University nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * This sofware has been developed by past and present members of the
 * Reusable Sofware Research Groups (RSRG) at Clemson University and
 * The Ohio State University.
 *)

Concept Character_Template;
    uses Integer_Theory;

    Definition Last_Char_Num: N;
    Constraint Last_Char_Num > 0;

    Type Family Character is modeled by N;
        exemplar c;
		constraints c < Last_Char_Num;
		initialization 
			ensures c = 0;
	end;

    Operation Char_to_Int(evaluates c: Character): Integer;
        ensures Char_to_Int = ( c );

    Operation Are_Equal(evaluates c1, c2: Character): Boolean;
        ensures Are_Equal = ( c1 = c2 );

    Operation Are_Not_Equal(evaluates c1, c2: Character): Boolean;
        ensures Are_Not_Equal = ( c1 /= c2 );

    Operation Less_Or_Equal(evaluates c1, c2: Character): Boolean;
        ensures Less_Or_Equal = ( c1 <= c2 );

    Operation Less(evaluates c1, c2: Character): Boolean;
        ensures Less = ( c1 < c2 );

    Operation Greater_Or_Equal(evaluates c1, c2: Character): Boolean;
        ensures Greater_Or_Equal = ( c1 >= c2 );

    Operation Greater(evaluates c1, c2: Character): Boolean;
        ensures Greater = ( c1 > c2 );

    Operation Replica(restores c: Character): Character;
        ensures Replica = ( c );

    Operation Read(replaces c: Character);

    Operation Write(evaluates c: Character);

    Operation Write_Line(evaluates c: Character);

-- 	Character generator operations are included in this concept implicitly.
-- 	The following function assignment statement, for example, 
--		c := ' '; 
-- 	invokes the following operation implicitly:
--    	Operation Blank_Space( ): Character;
--			ensures Blank_Space = 32;

end Character_Template;
