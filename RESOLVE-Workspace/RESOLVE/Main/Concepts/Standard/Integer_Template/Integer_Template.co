(*
 * This softare is released under the new BSD 2006 license.
 * 
 * Note the new BSD license is equivalent to the MIT License, except for the
 * no-endorsement final clause.
 * 
 * Copyright (c) 2007, Clemson University
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer. 
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution. 
 *   * Neither the name of the Clemson University nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * This sofware has been developed by past and present members of the
 * Reusable Sofware Research Groups (RSRG) at Clemson University and
 * The Ohio State University.
 *)


Concept Integer_Template;
	uses Integer_Theory;

    Definition min_int: Z;
    Definition max_int: Z;

    Constraint min_int <= 0 and 0 < max_int;

    Type Family Integer is modeled by Z;
        exemplar i;
        constraint min_int <= i <= max_int;
        initialization ensures i = 0;
	end;

    Operation Is_Zero(evaluates i: Integer): Boolean;
        ensures	Is_Zero = ( i = 0 );

    Operation Is_Not_Zero(evaluates i: Integer): Boolean;
        ensures	Is_Not_Zero = ( i /= 0 );

    Operation Increment(updates i: Integer);
        requires i + 1 <= max_int;
        ensures	i = #i + 1;

    Operation Decrement(updates i: Integer);
        requires min_int <= i - 1;
        ensures	i = #i - 1;

    Operation Less_Or_Equal(evaluates i, j: Integer): Boolean;
        ensures	Less_Or_Equal = ( i <= j );

    Operation Less(evaluates i, j: Integer): Boolean;
        ensures Less = ( i < j );

    Operation Greater(evaluates i, j: Integer): Boolean;
        ensures Greater = ( i > j );

    Operation Greater_Or_Equal(evaluates i, j: Integer): Boolean;
        ensures Greater_Or_Equal = ( i >= j );

    Operation Sum(evaluates i, j: Integer): Integer;
        requires min_int <= i + j <= max_int;
        ensures	Sum = ( i + j );

    Operation Negate(evaluates i: Integer): Integer;
        requires min_int <= -i <= max_int;
        ensures Negate = ( -i );

    Operation Difference(evaluates i, j: Integer): Integer;
        requires min_int <= i - j <= max_int;
        ensures Difference = ( i - j );

    Operation Product(evaluates i, j: Integer): Integer;
        requires min_int <= i * j <= max_int;
        ensures Product = ( i * j );

    Operation Power(evaluates i, j: Integer): Integer;
        requires min_int <= i**j <= max_int;
        ensures Power = ( i**j );

    Operation Divide(evaluates i, j: Integer; replaces q: Integer);
	requires if (j <= 0)
		then (j*(max_int + 1) < i and i < j*(min_int -1))
		else true;
        ensures (|j*q| <= |i|) and (|i - j*q| < |j|);

    Operation Mod(evaluates i, j: Integer): Integer;
	requires j /= 0;
	ensures Mod = ( i mod j );

    Operation Rem(evaluates i, j: Integer): Integer;

    Operation Quotient(evaluates i, j: Integer): Integer;

    Operation Div(evaluates i, j: Integer): Integer;
	requires j /= 0;
	ensures Div = ( i/j );

    Operation Are_Equal(evaluates i, j: Integer): Boolean;
        ensures Are_Equal = (i = j);

    Operation Are_Not_Equal(evaluates i, j: Integer): Boolean;
        ensures Are_Not_Equal = (i /= j);

    Operation Replica(restores i: Integer): Integer;
        ensures Replica = (i);

    Operation Read(replaces i: Integer);

    Operation Write(evaluates i: Integer);

    Operation Write_Line(evaluates i: Integer);

    Operation Max_Int(): Integer;
        ensures Max_Int = max_int;
		
    Operation Min_Int(): Integer;
        ensures Min_Int = min_int;

    Operation Clear(clears i: Integer);

-- 	Integer generator operations are included in this concept implicitly.
-- 	The following function assignment statement, for example, 
--		i := 10;
-- 	invokes the following operation implicitly:
--    	Operation Ten( ): Integer;
--			ensures Ten = 10;

end Integer_Template;
